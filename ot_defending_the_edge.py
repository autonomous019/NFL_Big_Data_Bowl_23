# -*- coding: utf-8 -*-
"""OT Defending The Edge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pAa4a2mhWEoBg72vjhK_S9qB8LUYrfr_

# **Offensive Tackles Defending the Edge: What makes a Good OT?**
"""

import pandas as pd
import numpy as np
import plotly.graph_objects as go
from matplotlib import pyplot as plt
import matplotlib.animation as animation
from matplotlib.animation import FuncAnimation
from functools import partial
from matplotlib.animation import writers
import os

import requests
from bs4 import BeautifulSoup

#%matplotlib inline

# Import from GoogleDrive

from google.colab import drive
drive.mount('/content/gdrive')
os.chdir("//content/gdrive/MyDrive/nfl-big-data-bowl-2023/")

data_dir = "/content/gdrive/My Drive/nfl-big-data-bowl-2023/"
save_dir = "/content/gdrive/My Drive/nfl-big-data-bowl-2023/charts/"
#if on kaggle
#data_dir = "/kaggle/input/nfl-big-data-bowl-2023/"

import sqlite3

# Create a SQL connection to a local SQLite database
con = sqlite3.connect(data_dir + "databowl.db")

#look up the week by gameId

def get_week_by_gameId(game_id): 
    
    sql = "SELECT week FROM games WHERE (games.gameId=" + str(game_id) + ")"
    query = pd.read_sql_query(sql, con)
    for index, row in query.iterrows():
        week = row["week"]
        
        

    return week
'''
#Testing

week_test = get_week_by_gameId(2021090900)
print(week_test)
'''

def get_distance(p, q):
    """ 
    Return euclidean distance between points p and q
    assuming both to have the same number of dimensions
    """
    # sum of squared difference between coordinates
    s_sq_difference = 0
    for p_i,q_i in zip(p,q):
        s_sq_difference += (p_i - q_i)**2
    
    # take sq root of sum of squared difference
    distance = s_sq_difference**0.5
    return distance

# check the function
a = (2, 3)
b = (5, 7)
# distance b/w a and b
d = get_distance(a, b)
# display the result
print(d)

#https://docs.scipy.org/doc/scipy/reference/spatial.distance.html
from scipy.spatial import distance
res = distance.euclidean(a, b)
print(res)



def combine_to_active_roster():
    #gets a list of OT in players table that match a row in combine table 
    sql = """
           select * from players as p, combine as c where p.officialPosition = 'T' and c.Name = p.displayName
    """
    #print(sql)  
    query = pd.read_sql_query(sql, con)
    #print(query)
    return query

OT_in_league = combine_to_active_roster()
#print(OT_in_league)



def player_xy(week, nfl_id, game_id, play_id):
    # get the x,y,pos,etc for the OT by nflId
    #  select * from week1 as wk where wk.nflId = 42377
 
    sql = """
           select * from week""" + str(week) + """ as wk where wk.nflId = """ + str(nfl_id) + """ 
           AND gameId = """ + str(game_id) + """ 
           AND playId = """ + str(play_id) + """ 
    """
    #print(sql)  
    query = pd.read_sql_query(sql, con)
    #print(query)
    return query

OT_xy = player_xy(1, 42377, 2021090900, 97)
#print(OT_xy)


def player_scouting(nfl_id):
    #get hits, missed blocks, etc for the OT by nflId, gameId, playId
    #  select * from pffScoutingData where nflId = 42377 
 
    sql = """
           select * from pffScoutingData as pff where pff.nflId = """ + str(nfl_id) + """  
    """
    #print(sql)  
    query = pd.read_sql_query(sql, con)
    #print(query)
    return query

OT_scouting = player_scouting(42377)
#print(OT_scouting)

def player_scouting_by_play(nfl_id, game_id, play_id):
    #get hits, missed blocks, etc for the OT by nflId, gameId, playId
    #  select * from pffScoutingData where nflId = 42377 
 
    sql = """
           select * from pffScoutingData as pff where pff.nflId = """ + str(nfl_id) + """ 
           AND pff.gameId = """ + str(game_id) + """ 
           AND pff.playId = """ + str(play_id) + """ 
    """
    #print(sql)  
    query = pd.read_sql_query(sql, con)
    #print(query)
    return query

OT_scouting_by_play = player_scouting_by_play(42377, 2021090900, 97)
#print(OT_scouting_by_play)

def player_xy_by_play(week, nfl_id, game_id, play_id):
    
    #get x,y,pos, etc for the blocked player by OT
    #  select * from week1 where nflId = 42403 AND playId = 97 and gameId = 2021090900 #nflId is the pffScoutingData.pff_nflIdBlockedPlayer
 
    sql = """
           select * from week""" + str(week) + """ where nflId = """+ str(nfl_id) + """
            AND playId = """ + str(play_id) + """
             and gameId = """ + str(game_id) + """ 
    """
    #print(sql)  
    query = pd.read_sql_query(sql, con)
    #print(query)
    return query

player_blocked_play = player_xy_by_play(1, 42377, 2021090900, 97)
#print(player_blocked_play)

def qb_for_play(game_id, play_id):
    #get hits, missed blocks, etc for the OT by nflId, gameId, playId
    #  select * from pffScoutingData where nflId = 42377 
 
    sql = """
           select * from pffScoutingData as pff where pff.pff_role = 'Pass' 
           AND pff.gameId = """ + str(game_id) + """ 
           AND pff.playId = """ + str(play_id) + """ 
    """
    #print(sql)  
    query = pd.read_sql_query(sql, con)
    #print(query)
    return query

qb_play = qb_for_play(2021090900, 97)
#print(qb_play)

#get tracking data for each play by passResult
def get_player_tracking_limit(nfl_id, game_id, play_id, week, event):
    #game_id (int), play_id (int),  week (int), event: pass_forward, ball_snap
    sql = """select rowid from week""" + str(week) + """ as wk 
             where wk.gameid = """ + str(game_id) + """  
             AND wk.playId = """ + str(play_id) + """ 
             AND wk.nflId = """ + str(nfl_id) + """
             AND wk.event = '""" + event + """'
          """
    #print(sql)
    query = pd.read_sql_query(sql, con) 
    result = query['rowid'].tolist()
    #sometimes there are data errors missing 'pass_forward' or 'ball_snap' skip those plays
    if len(result) == 0:
        return None

    result = result[0]
    return result




#get tracking data for each play by passResult
def get_player_relevant_tracking_data(nfl_id, game_id, play_id, week, lower_bounds, upper_bounds):
    #game_id (int), play_id (int), team (str) i.e. 'TB', week (int), pass_result (int; 0,1), lower_bounds (int), upper_bounds (int)
    #upper = upper_bounds - lower_bounds + 1
    upper_bounds = upper_bounds - lower_bounds
    upper = upper_bounds + 1
    lower = 6 - 1
    sql = """select wk.playId, wk.gameId, wk.nflId, wk.frameId, wk.time, wk.x, 
             wk.y, wk.s, wk.a, wk.dis, wk.o, wk.dir, wk.event from week""" + str(week) + """ as wk 
             where wk.gameid = """ + str(game_id) + """ 
             AND wk.playId = """ + str(play_id) + """ 
             AND wk.nflId = """ + str(nfl_id) + """   
             AND wk.team != 'football' 
             LIMIT """+str(lower)+""","""+str(upper)+"""              
          """
    #print(sql)
    query = pd.read_sql_query(sql, con)
    
    return query


def add_metric(metric):
    print(type(metric))
    print(len(metric))
    for cnt,j in enumerate(metric):
      for rec in j.iterrows():
        game_id = rec[1]['gameId']
        play_id = rec[1]['playId']
        nfl_id = rec[1]['nflId']
        frame_id = rec[1]['frameId']
        time = rec[1]['time']
        x = rec[1]['x']
        y = rec[1]['y']
        s = rec[1]['s']
        a = rec[1]['a']
        dis = rec[1]['dis']
        o = rec[1]['o']
        dir = rec[1]['dir']
        
        cursor = con.cursor()
        sql = "INSERT INTO `clipped_tracking` (`nflId`, `gameId`, `playId`, `frameId`, `time`, `x`, `y`, `s`, `a`, `dis`, `o`, `dir` ) VALUES (" + str(nfl_id) + "," + str(game_id) + "," + str(play_id) + "," + str(frame_id) + ", '" + str(time) + "',"  + str(x) + ", " + str(y) + ", " + str(s) + "," + str(a) + "," + str(dis) + "," + str(o) + "," + str(dir) + ")"
        # Execute the query
        cursor.execute(sql)
        # the connection is not autocommited by default. So we must commit to save our changes.
        con.commit()
      



'''
CREATE TABLE IF NOT EXISTS "clipped_tracking" (
	"gameId"	INTEGER,
	"playId"	INTEGER,
	"nflId"	REAL,
	"frameId"	INTEGER,
	"time"	TEXT,
	"x"	REAL,
	"y"	REAL,
	"s"	REAL,
	"a"	REAL,
	"dis"	REAL,
	"o"	REAL,
	"dir"	REAL
)


'''

######################## END FUNCTIONS FOR TRACKING AND METRICS ###############################################

"""**Get Tracking Data for Offensive Tackles that were at NFL Combine**"""

#Generate a list for offensive tackles that competed at combines and on active roster for 2021 

#list of plays per player in all games
nfl_ids = OT_in_league[['nflId']]
#print(nfl_ids)

metrics = []
for index, row in nfl_ids.iterrows():
  nfl_id = row['nflId']
  print(nfl_id)
  player_scouting_info = player_scouting(nfl_id)
  print(len(player_scouting_info))
  for i,r in player_scouting_info.iterrows():
    game_id = r['gameId']
    play_id = r['playId']
    #get week by gameId
    game_week = get_week_by_gameId(r["gameId"])
    
    #get x,y of each play for OT
    start_limit = get_player_tracking_limit(nfl_id, game_id, play_id, game_week, 'ball_snap')
    if start_limit is None:
      continue #continue if missing data entry for ball_snap
    
    end_limit = get_player_tracking_limit(nfl_id, game_id, play_id, game_week, 'autoevent_passforward')
    if end_limit is None:
      continue #continue if missing data entry for pass_forward

    #get the tracking data between ball_snap and pass_forward only, clipping tracking data that is irrelevant
    relevant_tracking_data = get_player_relevant_tracking_data(nfl_id, game_id, play_id, game_week, start_limit, end_limit)

    metrics.append(relevant_tracking_data[['gameId', 'playId', 'nflId', 'frameId', 'time','x', 'y', 's', 'a', 'dis', 'o', 'dir']])

  print("Metrics of ", nfl_id, len(metrics))

  
  #add_metric(metrics)

"""**Get List and Tracking for Defender Blocked by Combine Offensive Tackles**"""

# Generate a list of defenders tracking data blocked by OT from combine
#get a list of nflIds from Combine OTs
nfl_ids = OT_in_league[['nflId']]
print(nfl_ids)
#need to get pff_nflIdBlockedPlayer 
#blocked_id = 0
blocked_metrics = []

for index, row in nfl_ids.iterrows():
  nfl_id = row['nflId']
  player_scouting_info = player_scouting(nfl_id)
  player_scouting_info = player_scouting_info.dropna(subset=['pff_nflIdBlockedPlayer'])
  #df = df.dropna(subset=['colA', 'colC'])
  print(len(player_scouting_info))
  print(player_scouting_info)
  
  print("len player scouting ", len(player_scouting_info))

  blocked_players = []
  for i,r in player_scouting_info.iterrows():
    game_id = r['gameId']
    play_id = r['playId']
    blocked_id = r['pff_nflIdBlockedPlayer']
    print("blocked id", blocked_id)
    #get week by gameId
    game_week = get_week_by_gameId(r["gameId"])
    print(game_id, play_id, game_week)
    
    #get x,y of each play for blocked player

    start_limit = get_player_tracking_limit(blocked_id, game_id, play_id, game_week, 'ball_snap')
    if start_limit is None:
      continue #continue if missing data entry for ball_snap
    
    end_limit = get_player_tracking_limit(blocked_id, game_id, play_id, game_week, 'autoevent_passforward')
    if end_limit is None:
      continue #continue if missing data entry for pass_forward

    #get the tracking data between ball_snap and pass_forward only, clipping tracking data that is irrelevant
    relevant_tracking_data = get_player_relevant_tracking_data(blocked_id, game_id, play_id, game_week, start_limit, end_limit)
    blocked_metrics.append(relevant_tracking_data[['gameId', 'playId', 'nflId', 'frameId', 'time','x', 'y', 's', 'a', 'dis', 'o', 'dir']])
    
  print("Metrics of ", nfl_id, len(blocked_metrics))

  #add_metric(blocked_metrics)

def plays_to_blocks():
    sql = """
           select DISTINCT gameId, playId from clipped_tracking
    """
    query = pd.read_sql_query(sql, con)
    return query

def qbs_to_blocks(game_id, play_id):
    sql = """
           select nflId from pffScoutingData as pff WHERE pff.gameId = """ + str(game_id) + """ 
           AND pff.playId = """ + str(play_id) + """ AND pff.pff_role = 'Pass'
    """  
    query = pd.read_sql_query(sql, con)
    return query


# Generate a list of defenders tracking data blocked by OT from combine
#get a list of nflIds from Combine OTs
nfl_ids = OT_in_league[['nflId']]
plays_blocks = plays_to_blocks()

#lookup nflId of pff_role = 'Pass' 
qbs_metrics = []

for index, row in plays_blocks.iterrows():
  game_id = row['gameId']
  play_id = row['playId']
  qb = qbs_to_blocks(game_id, play_id)
  game_week = get_week_by_gameId(game_id)
  for i,r in qb.iterrows():
    qb_id = r['nflId']
  
  print("G:P:QB ", game_id, play_id, qb_id)
  #get x,y of each play for blocked player

  start_limit = get_player_tracking_limit(qb_id, game_id, play_id, game_week, 'ball_snap')
  if start_limit is None:
    continue #continue if missing data entry for ball_snap
    
  end_limit = get_player_tracking_limit(qb_id, game_id, play_id, game_week, 'autoevent_passforward')
  if end_limit is None:
    continue #continue if missing data entry for pass_forward

  #get the tracking data between ball_snap and pass_forward only, clipping tracking data that is irrelevant
  relevant_tracking_data = get_player_relevant_tracking_data(qb_id, game_id, play_id, game_week, start_limit, end_limit)
  #append record to metric list
  qbs_metrics.append(relevant_tracking_data[['gameId', 'playId', 'nflId', 'frameId', 'time','x', 'y', 's', 'a', 'dis', 'o', 'dir']])


print("Qb metrics: ", len(qbs_metrics))

#sql = "select DISTINCT(nflId) from clipped_tracking"
sql = "select * from clipped_tracking"
query = pd.read_sql_query(sql, con)
print(len(query))
query.head()

#  select * from pffScoutingData where nflid = 42377 returns 306 plays
#  select * from pffScoutingData where nflid = 42377 AND pff_beatenByDefender = 1 returns 12 plays
#  select * from pffScoutingData where nflid = 42377 AND pff_hitAllowed = 1 returns 2 plays
#  select * from pffScoutingData where nflid = 42377 AND pff_hurryAllowed = 1 returns 12 plays
#  select * from pffScoutingData where nflid = 42377 AND pff_sackAllowed = 1 returns 1 play
#
# 4 Base Metrics: beatenByDefender, hitAllowed, hurryAllowed, sackAllowed
# retrieve gameId, playId, defender_id for each

"""**Blocker Metrics: sacks allowed, blown blocks for each Offensive Tackle**

-- minimum sample size is 100 plays

-- only for OTs that participated in the NFL Combine

understanding how QB metrics are relevant to OT metrics, https://www.nfl.com/news/next-gen-stats-intro-to-passing-score-metric

reading: https://aws.amazon.com/nfl/next-gen-stats-coverage-classification/ml-solutions-lab-qa/


"""

def blocker_metrics(nfl_id):
    sql = """
           select * from pffScoutingData as pff WHERE pff.nflId = """ + str(nfl_id) + """ 
    """  
    query = pd.read_sql_query(sql, con)
    return query

def plays_to_events(nfl_id, event):
    #nfl_id is the nflId of the blocker, here Offensive Tackle (OT)
    #event is the metric: pff_beatenByDefender, pff_hitAllowed, pff_hurryAllowed, pff_sackAllowed =1, 'none' is where all = 0
    event_plays = [] # a list for plays for given event
    
    if event == 'pff_beatenByDefender':
        sql = """
              select * from pffScoutingData as pff WHERE pff.nflId = """ + str(nfl_id) + """
              AND pff.pff_beatenByDefender = 1  
        """  
        beatenByDefender_query = pd.read_sql_query(sql, con)
        for i,r in beatenByDefender_query.iterrows():
          game_plays = str(r['gameId']) + "," + str(r['playId']) + "," + str(r['pff_nflIdBlockedPlayer'])
          event_plays.append(game_plays)


    if event == 'pff_hitAllowed':
        sql = """
              select * from pffScoutingData as pff WHERE pff.nflId = """ + str(nfl_id) + """ 
              AND pff.pff_hitAllowed = 1 
        """  
        hitAllowed_query = pd.read_sql_query(sql, con)
        for i,r in hitAllowed_query.iterrows():
          game_plays = str(r['gameId']) + "," + str(r['playId']) + "," + str(r['pff_nflIdBlockedPlayer'])
          event_plays.append(game_plays)

    if event == 'pff_hurryAllowed':
        sql = """
              select * from pffScoutingData as pff WHERE pff.nflId = """ + str(nfl_id) + """ 
              AND pff.pff_hurryAllowed = 1 
        """  
        hurryAllowed_query = pd.read_sql_query(sql, con)
        for i,r in hurryAllowed_query.iterrows():
          game_plays = str(r['gameId']) + "," + str(r['playId']) + "," + str(r['pff_nflIdBlockedPlayer'])
          event_plays.append(game_plays)

    if event == 'pff_sackAllowed':
        sql = """
              select * from pffScoutingData as pff WHERE pff.nflId = """ + str(nfl_id) + """ 
              AND pff.pff_sackAllowed = 1 
        """  
        #print(sql)
        sackAllowed_query = pd.read_sql_query(sql, con)
        for i,r in sackAllowed_query.iterrows():
          game_plays = str(r['gameId']) + "," + str(r['playId']) + "," + str(r['pff_nflIdBlockedPlayer'])
          event_plays.append(game_plays)
        
    if event == 'none':
        sql = """
              select * from pffScoutingData as pff WHERE pff.nflId = """ + str(nfl_id) + """ 
              AND pff.pff_hitAllowed = 0 
              AND pff.pff_hurryAllowed = 0 
              AND pff.pff_sackAllowed = 0 
              AND pff.pff_beatenByDefender = 0 
        """  
        none_query = pd.read_sql_query(sql, con)
        for i,r in none_query.iterrows():
          game_plays = str(r['gameId']) + "," + str(r['playId']) + "," + str(r['pff_nflIdBlockedPlayer'])
          event_plays.append(game_plays)

    return event_plays


test_plays = plays_to_events(42377, 'pff_beatenByDefender')
print(len(test_plays))

def listToString(s):
   
    # initialize an empty string
    str1 = " "
   
    # return string 
    return (str1.join(s))

def player_tracking_clipped(nfl_id, game_id, play_id):

    sql = """
           select * from clipped_tracking as ct WHERE ct.nflId = """ + str(nfl_id) + """ 
           AND  ct.gameId = """ + str(game_id) + """ 
           AND  ct.playId = """ + str(play_id) + """ 
    """  
    query = pd.read_sql_query(sql, con)
    #print(sql)
    #print(query)
    return query

def combine_results(nfl_id):
    name_sql = """
           select p.displayName from players as p WHERE p.nflId = """ + str(nfl_id) + """ 
            
    """  
    name = pd.read_sql_query(name_sql, con)
    name = name.values.tolist()
    for n in name:
      player_name = n
      player_name = listToString(player_name)

    sql = """
           select * from combine as c WHERE c.Name = '""" + str(player_name) + """' 
            
    """  
    query = pd.read_sql_query(sql, con)
    #print(sql)
    #print(query)
    return query


def metric_euclidean(offense_tracking, defender_tracking):    
    x_y_coords = offense_tracking[['x', 'y']]
    records = x_y_coords.to_records(index=False)
    result = list(records)
    x_y_coords_list = result
    reference1_id = offense_tracking[['nflId']]
    
    x_y_coords_defender = defender_tracking[['x', 'y']]
    defender_records = x_y_coords_defender.to_records(index=False)
    defender_result = list(defender_records)
    defender_x_y_coords_list = defender_result
    reference2_id = defender_tracking[['nflId']]

    for c,k in enumerate(defender_x_y_coords_list):
      print()
      print(c)
      print("ref1 x,y: ", x_y_coords_list[c])
      ref1_tuple = x_y_coords_list[c]
      print("ref2 x,y: ", defender_x_y_coords_list[c])
      ref2_tuple = defender_x_y_coords_list[c]
      euclidian_distance = get_distance(ref1_tuple, ref2_tuple)
      print("Euclidean: ", euclidian_distance)
    
      #write playId, gameId, nflId, x, y, euclidean to db
      # Create a new record
      #cursor = con.cursor()
      #role is 'OT', 'QB', 'Edge Rusher'
      #nflId is same as reference2_id (nflId of second list)
      #sql = "INSERT INTO `metrics` (`nflId`, `reference1_Id`, `reference1_x`, `reference1_y`, `gameId`, `playId`, `role`, `reference2_x`, `reference2_y`, `euclidean`, `acceleration`, `yards`, `avg_speed`, `play_length`) VALUES (" + str(nfl_id) + ", " + str(qb) + ", " + str(qb_x) +", " + str(qb_y) + ", " + str(game_id) + ", " + str(play_id) + ", 'offense', " + str(ref_x) + ", " + str(ref_y) + ", " + str(euclidian_distance) + ")"
                
      # Execute the query
      #cursor.execute(sql)
      # the connection is not autocommited by default. So we must commit to save our changes.
      #con.commit()
                
def convert_yds_to_mph(seconds, distance):    
    d_ft = distance * 3
    d_inches = d_ft * 12
    d_yards = d_ft / 3.0
    d_miles = d_ft / 5280.0
    miles = print("Input distance in miles ", d_miles)

    hours=float(seconds)/3600
    mph = float(d_miles)/seconds*3600
    return(mph)




################## END Function Definitions ####################################


#how much weight to put on each of the different metric events, sack is more damaging then hurry, etc. 
nfl_ids = OT_in_league[['nflId']]

for c,r in nfl_ids.iterrows():
  player_id = r['nflId']
  player_metric = blocker_metrics(player_id)
  if(len(player_metric) >= 100):
    #get total (sum) of 4 metrics tracked by pff for OL in pffScoutingData table
    beaten_by_defender = player_metric['pff_beatenByDefender'].sum()
    hit_allowed = player_metric['pff_hitAllowed'].sum()
    hurry_allowed = player_metric['pff_hurryAllowed'].sum()
    sack_allowed = player_metric['pff_sackAllowed'].sum()
    #get [gameId, playId, pff_nflIdBlockedPlayer] returned in a list for each metric event
    beaten_plays = plays_to_events(player_id, 'pff_beatenByDefender')
    hit_plays = plays_to_events(player_id, 'pff_hitAllowed')
    hurry_plays = plays_to_events(player_id, 'pff_hurryAllowed')
    sack_plays = plays_to_events(player_id, 'pff_sackAllowed')
    combine_performance = combine_results(player_id)
    #display metrics for each player
    print("Player Metrics: ", r['nflId'])
    print("Combine Performance: ", combine_performance)
    print("Total Plays: ", len(player_metric))
    print("beaten by defender: ", beaten_by_defender, beaten_plays)
    print("hit allowed: ", hit_allowed, hit_plays)
    print("hurry allowed: ", hurry_allowed, hurry_plays)
    print("sack allowed: ", sack_allowed, sack_plays)
    for r in sack_plays:
        args = r.split(',')
        game_id = args[0]
        play_id = args[1]
        blocker_id = args[2]
        player_tracking_for_play = player_tracking_clipped(player_id, game_id, play_id)
        print(len(player_tracking_for_play))
    print()

#testing euclidean distance, speed distance metrics, etc.
qb_tracking_for_play = player_tracking_clipped(25511, 2021090900, 97)
player_tracking_for_play = player_tracking_clipped(42377, 2021090900, 97)
defender_tracking_for_play = player_tracking_clipped(42403, 2021090900, 97)

metric_euclidean(player_tracking_for_play, defender_tracking_for_play)

#'time_on_block' = time where euclidean < 1.00 OT & Edge Rusher
#get min euclidean between blocked rusher and QB and was OT between rusher and QB
#if defender euclidean to QB < OT euclidean to QB, penalize
#if OT euclidean to QB is < 1 even if b/w Edge Rusher and QB, penalize
#have to account for orientation when measuring if OT is < 1 to QB, not in pass lane is ok
#if momentum is away from QB, penalize if toward (dir) QB
#create an upper bound of 4 sec, pocket becomes chaotic after 3.5,4 sec from ball snap

#frame_metrics table holds tracking_data
#play_metrics holds total metric calculations on a per play basis
#aggregate_metrics holds tabular data for OTBR with final score per OT, OGBR
#combine_to_performance holds tabular data for whether combine performance predicts on field performance

print()    
print("Offensive Tackle Speed and Distance")
speed_metrics = player_tracking_for_play[['nflId', 'frameId', 'time','x', 'y', 's', 'a', 'dis', 'o']]
distance_covered = speed_metrics['dis'].sum()
print("yds covered ", distance_covered)
#get total frames, frame = 1 row of results, see time column
min_time = player_tracking_for_play['frameId'].min()
max_time = player_tracking_for_play['frameId'].max()
time_lapse = max_time - min_time + 1
print("time lapse frames ", time_lapse) 
time_units = time_lapse * .1 #each frame is .1 seconds
print("time (S): ", time_units)
#avg_throw_time.append(time_units)
mph = convert_yds_to_mph(time_units, distance_covered)
print("Avg speed: ", mph)

print()
print("Edge Rusher Speed and Distance")
speed_metrics = defender_tracking_for_play[['nflId', 'frameId', 'time','x', 'y', 's', 'a', 'dis', 'o']]
distance_covered = speed_metrics['dis'].sum()
print("yds covered ", distance_covered)
#get total frames, frame = 1 row of results, see time column
min_time = player_tracking_for_play['frameId'].min()
max_time = player_tracking_for_play['frameId'].max()
time_lapse = max_time - min_time + 1
print("time lapse frames ", time_lapse) 
time_units = time_lapse * .1 #each frame is .1 seconds
print("time (S): ", time_units)
#avg_throw_time.append(time_units)
mph = convert_yds_to_mph(time_units, distance_covered)
print("Avg speed: ", mph)
print()
print()

print("---------------------------------")
print("Edge Rusher in Relation to the Quarterback: Pressure Metric")
#Quarterback Tracking
#tracking of defender in relations to the quarterback
metric_euclidean(qb_tracking_for_play, defender_tracking_for_play)
print()
print()

print("---------------------------------")
print("Offensive Tackle in Relation to Quarterback: Interdiction Metric ")
#tracking of OT in relation to the quarterback
metric_euclidean(qb_tracking_for_play, player_tracking_for_play)
print()
print()





"""# **Plots of Each Relevant Play**"""

#  https://stackoverflow.com/questions/63901823/matplotlib-animation-passing-variables-through-funcanimation
from functools import partial
import matplotlib as mpl



game_id = 2021090900

week = get_week_by_gameId(game_id)


#need a query to get nflIds of OL, QB, DL for play in game, then iterate through to clip for relevant data
#select DISTINCT(nflId) from pffScoutingData as sd where sd.playId = 97 and sd.gameId = 2021090900 AND sd.pff_role IN ('Pass Block', 'Pass Rush', 'Pass') 

#helper function convert list element to string

def tracking_by_nfl_id_limit(game_id, play_id, nfl_id, week, event):
    #event: 'ball_snap', 'pass_forward'

    sql = """select rowid from week""" + str(week) + """ as wk 
             where wk.gameid = """ + str(game_id) + """  
             AND wk.playId = """ + str(play_id) + """ 
             AND wk.nflId = """ + str(nfl_id) + """
             AND wk.event = '""" + event + """'
          """
    #print(sql)
    query = pd.read_sql_query(sql, con) 
    result = query['rowid'].tolist()
    #sometimes there are data errors missing 'pass_forward' or 'ball_snap' skip those plays
    if len(result) == 0:
        return None

    result = result[0]
    return result


def tracking_by_nfl_id(game_id, play_id, nfl_id, week, start_limit, end_limit):

    start_limit = start_limit - end_limit
    upper = end_limit + 1
    lower = 6 - 1
    sql = """select plays.passResult, wk.playId, wk.gameId, wk.nflId, wk.frameId, wk.time, wk.x, 
             wk.y, wk.s, wk.a, wk.dis, wk.o, wk.dir, wk.event from plays, week""" + str(week) + """ as wk 
             where plays.gameid = """ + str(game_id) + """  
             AND plays.playId = """ + str(play_id) + """   
			       AND wk.nflId = """ + str(nfl_id) + """ 
             AND plays.playId = wk.playId 
             AND plays.gameId = wk.gameId 
             AND wk.team != 'football'
			       LIMIT """ + str(lower) + """,""" + str(upper) + """ 
          """
    #print(sql)
    query = pd.read_sql_query(sql, con)
    return query

def get_play_info(game_id, play_id):
    sql = """select * from games, plays where games.gameId = 2021090900 AND plays.gameID = """ + str(game_id) + """  
        AND plays.playId = """+ str(play_id) + """
          """
    #print(sql)
    query = pd.read_sql_query(sql, con)
    return query

  #select * from games, plays where games.gameId = 2021090900 AND plays.gameID = 2021090900 AND plays.playId = 97


#get tracking data for each play by passResult
def get_animation_data(game_id, play_id, week):
    #game_id (int), play_id (int), team (str) i.e. 'TB', week (int), pass_result (int; 0,1), penalty (int:0,1)

    sql = """select DISTINCT(nflId) from pffScoutingData as sd where sd.playId = """ + str(play_id) + """ and sd.gameId = """ + str(game_id) + """
             AND sd.pff_role IN ('Pass Block', 'Pass Rush', 'Pass')
    """
    #iterate through nflIds, run query to retieve x,y,etc
    query = pd.read_sql_query(sql, con)

    records = query.to_records(index=False)
    result = list(records)

    x_y_coords_list = result
    nflIds = []
    coords_tuple = ()
    data_dict = {}
    x_data = []
    y_data = []

    k = 1
    for i in x_y_coords_list:
        key = k
        k += 1
        nflIds.append(i[0])
        player_id = i[0] #nflId

        start_limit = tracking_by_nfl_id_limit(game_id, play_id, player_id, week, 'ball_snap')
        if start_limit is None:
            continue
    
        end_limit = tracking_by_nfl_id_limit(game_id, play_id, player_id, week, 'autoevent_passforward')
        if end_limit is None:
            continue

        tracking_records = tracking_by_nfl_id(game_id, play_id, player_id, week, start_limit, end_limit)
        frame_counter = len(tracking_records)
        data_dict_tuple = ()
        tracking_records = tracking_records[['x', 'y', 'o']]
        for index, row in tracking_records.iterrows():
            x = row["x"]
            y = row["y"]
            o = row["o"]
            coords = x,y,o
            coords_tuple = list(coords_tuple)
            coords_tuple.append(coords)
            data_dict_tuple = list(data_dict_tuple)
            data_dict_tuple.append(coords)
            coords_tuple = tuple(coords_tuple)
            data_dict_tuple = tuple(data_dict_tuple)
            x_data.append(x)
            y_data.append(y)
            
        data_dict[key] = data_dict_tuple

    return coords_tuple, frame_counter, data_dict, play_id, game_id, x_data, y_data
# end of function get_animation_data() #############################################

''''
          #ax.plot(x1, y1, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')
          #ax.lines.set_marker(None)
          #ax.plot.set_marker(None)
          #for line in ax.lines:
          #    print(line)
              #line.set_marker(None)
              #ax.plot(x1, y1, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')


'''

x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22 = [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [] 
y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17, y18, y19, y20, y21, y22 = [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [] 
o1 = []

fig, ax = plt.subplots()
fig.set_figwidth(12)
fig.set_figheight(8)

plt.style.use("ggplot")

colors_list = [ '#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000', '#ff0000', '#808080']

xy_data, frames, data_dict, play_id, game_id, x_data, y_data = get_animation_data(2021090900, 97, 1) #returns a tuple of coords 

play_info = get_play_info(game_id, play_id)
#print(play_info)
play_description = play_info.iloc[0]['playDescription']
quarter = play_info.iloc[0]['quarter']
down = play_info.iloc[0]['down']
yards_to_go = play_info.iloc[0]['yardsToGo']
possession_team = play_info.iloc[0]['possessionTeam']
personnel_o = play_info.iloc[0]['personnelO']
personnel_d = play_info.iloc[0]['personnelD']
defenders_in_box = play_info.iloc[0]['defendersInBox']
pff_pass_coverage = play_info.iloc[0]['pff_passCoverage']
pff_pass_coverage_type = play_info.iloc[0]['pff_passCoverageType']


ax.set(title = play_description + "\n Play ID: " + str(play_id) + " O Package: "+personnel_o,
       xlabel = "D Package: " + personnel_d + " In Box: " + str(defenders_in_box) + " Coverage: " + pff_pass_coverage + " Type: "+pff_pass_coverage_type,
       ylabel = possession_team + " Down: " + str(down) + " and " + str(yards_to_go) + " Q: " + str(quarter)
       )

coords_xy = xy_data

max_val_x = max(x_data)
min_val_x = min(x_data)
max_val_y = max(y_data)
min_val_y = min(y_data)
ax.set_xlim(min_val_x-2, max_val_x+2)
ax.set_ylim(min_val_y-2, max_val_y+2)
ax.grid(axis='y')


data_frames = frames
frame_cnt = len(coords_xy)
print("data frames: ", data_frames)
print("data dict: ", len(data_dict))
print(data_dict)



def animation_frame(i, coords_xy, data_dict, data_frames):  
    data_dict_len = len(data_dict)
    
    for k, v in data_dict.items():
        
        if(k == 1):
          data_copy = v
          data_copy = list(data_copy)
          x1.append(data_copy[i][0])
          y1.append(data_copy[i][1])
          o1.append(int(data_copy[i][2]))
          ax.plot(x1, y1, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x1, y1, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')

        if(k == 2):
          data_copy = v
          data_copy = list(data_copy)
          x2.append(data_copy[i][0])
          y2.append(data_copy[i][1])
          ax.plot(x2, y2, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x2, y2, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')

        if(k == 3):
          data_copy = v
          data_copy = list(data_copy)
          x3.append(data_copy[i][0])
          y3.append(data_copy[i][1])
          ax.plot(x3, y3, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x3, y3, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')

        if(k == 4):
          data_copy = v
          data_copy = list(data_copy)
          x4.append(data_copy[i][0])
          y4.append(data_copy[i][1])
          ax.plot(x4, y4, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x4, y4, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')

        if(k == 5):
          data_copy = v
          data_copy = list(data_copy)
          x5.append(data_copy[i][0])
          y5.append(data_copy[i][1])
          ax.plot(x5, y5, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x5, y5, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')

        if(k == 6):
          data_copy = v
          data_copy = list(data_copy)
          x6.append(data_copy[i][0])
          y6.append(data_copy[i][1])
          ax.plot(x6, y6, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x6, y6, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')

        if(k == 7):
          data_copy = v
          data_copy = list(data_copy)
          x7.append(data_copy[i][0])
          y7.append(data_copy[i][1])
          ax.plot(x7, y7, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x7, y7, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')

        if(k == 8):
          data_copy = v
          data_copy = list(data_copy)
          x8.append(data_copy[i][0])
          y8.append(data_copy[i][1])
          ax.plot(x8, y8, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x8, y8, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')

        if(k == 9):
          data_copy = v
          data_copy = list(data_copy)
          x9.append(data_copy[i][0])
          y9.append(data_copy[i][1])
          ax.plot(x9, y9, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x9, y9, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')

        if(k == 10):
          data_copy = v
          data_copy = list(data_copy)
          x10.append(data_copy[i][0])
          y10.append(data_copy[i][1])
          ax.plot(x10, y10, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x10, y10, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')

        if(k == 11):
          data_copy = v
          data_copy = list(data_copy)
          x11.append(data_copy[i][0])
          y11.append(data_copy[i][1])
          ax.plot(x11, y11, color=colors_list[k], linewidth=4)
          if(i == 0):
              ax.plot(x11, y11, color=colors_list[k], marker='o', markersize=14, markeredgewidth=2, markeredgecolor='#000000')
         

ani = FuncAnimation(fig,func=partial(animation_frame, coords_xy=xy_data, data_dict=data_dict, data_frames=data_frames), frames=np.arange(0, data_frames, 1), interval=1)
#ani = FuncAnimation(fig, func=animation_frame, frames=np.arange(0, frame_cnt, 1), interval=1)

from matplotlib.animation import writers
Writer = writers['ffmpeg']
writer = Writer(fps=10, metadata={'artist': 'Michael Joseph McCarron'}, bitrate=1800)

ani.save(str(game_id) + '_' + str(play_id) + '.mp4', writer)















